# -*- coding: utf-8 -*-
"""Forsk-01-Day-Workshop.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UdStIRJ_qm03aYn_W_I1YEmwodkFvuTt

![alt text](http://forsk.in/images/Forsk_logo_bw.png)

> > # "1 Day Workshop in Association with Celebal Technologies, Jaipur"


# Analytics, Machine Learning and DataBricks

# Python Programming Essentials

1.   Data Types
2.   Taking input from user
3.   String Operations
4.   Control Statements
5.   Looping
6.   List
7.   Importing Libraries
"""

a = 2.3
print type(a) #float

a = 3
print type(a)  #int

a = "Hello"
print type(a) #string

a = 'F'
print type(a) #string

a = "F"
print type(a) #string

number = input("Enter the number: ")
print number

name = raw_input("Enter the name: ")
print name

"""## Cutting and Slicing Strings and Examples of Substring"""

##
# Python's program to substring a string in Python
 
test = "Forsk Technologies"
print("String: ", test)
 
# First one character
first_character = test[:1]
print("First Character: ", first_character)
 
# Last one character
last_character = test[-1:]
print("Last Character: ", last_character)
 
# Everything except the first one character
except_first = test[1:]
print("Except First Char.: ", except_first)
 
# Everything except the last one character
except_last = test[:-1]
print("Except Last Char.: ", except_last)
 
# Everything between first and last two character
between_two = test[2:-2]
print("Between two character: ", between_two)
 
# Skip one character
skip_one = test[0:18:2]  # [start:stop:step]
print("Skip one character: ", skip_one)
 
# Reverse String
reverse_str = test[::-1]
print("Reverse String: ", reverse_str)

"""## Python Ifâ€¦Else Statements"""

x = 10
y = 20
 
if x < y:
    print("x is less than y")

x = 10
y = 5
 
if x < y:
    print("x is less than y")
else:
    print("y is less than x")

x = 10
y = 10
z = 15
 
if x < y:
    print("x is less than y")
elif x < z:
    print("x is less than z")
else:
    print("x is equal to y")

"""## Python While Loop"""

num = 1
 
while num <= 10:
    print("5 X ", num, " = ", 5 * num)
    num = num + 1

"""## Python For Loop"""

# Starts with 5 upto 9
for number in range(5, 10):
    print(number)

# Starts with 5 upto 30 increment by 3
for number in range(5, 30, 3):
    print(number)

for number in [1, 2, 3, 4, 5]:
    print("Python")

for number in [1, 2, 3, 4, 5]:
    print number

"""## Python Lists"""

intList = [10, 20, 30, 40]
strList = ["Canada", "Japan", "London"]
mixList = ["Canada", 20, True, 500.50]

generate = [x + 6 for x in [4, 5, 6]]  # Generate from loop

python = list('python')  # List from a string
 
print(intList)
print(strList)
print(mixList)
print(generate)

print(python)

testList = ["Canada", "Japan", "London"]
print(testList[0])
print(testList[1])
print(testList[2])

testList = ["Canada", "Japan", "London"]
print(testList)
 
testList[0] = "Germany"
testList[1] = 100
print(testList)

testList = ["Canada", "Japan", "London", "Germany", "Africa"]
 
for item in testList:
    print(item)

testList = ["Canada", "Japan", "London", "Germany", "Africa"]
 
if "Japan" in testList:
    print("Yes")

testList = ["Canada", "Japan", "London", "Germany", "Africa"]
print(len(testList))

testList = ["Canada", "Japan", "London", "Germany"]
print(testList)
 
testList.append("Africa")
print(testList)

testList = ["Canada", "Japan", "London", "Germany"]
print(testList)
 
testList.insert(1, "Africa")
print(testList)

testList = ["Canada", "Japan", "London", "Germany"]
print(testList)
 
testList.remove("Japan")  # Japan removed
print(testList)
 
testList.pop(1)  # London removed
print(testList)
 
testList.pop()  # Last item removed
print(testList)

testList = ["Canada", "Japan", "London", "Germany"]
#testList.clear()  #works in Python 3.x
testList[:] = []
print(testList)
 
del testList

list1 = ["Canada", "Japan"]
list2 = ["London", "Germany"]
 
list3 = list1 + list2
print(list3)
 
mergedlist = []
mergedlist.extend(list1)
mergedlist.extend(list2)
print(mergedlist)

items = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
 
print(items[4:])  # From index 4 to last index
 
print(items[:4])  # From index 0 to 4 index
 
print(items[4:7])  # From index 4(included) up to index 7(excluded)
 
print(items[:-1])  # Excluded last item
 
print(items[:-2])  # Up to second last index(negative index)
 
print(items[::-1])  # From last to first in reverse order(negative step)
 
print(items[::-2])  # All odd numbers in reversed order
 
print(items[-2::-2])  # All even numbers in reversed order
 
print(items[::])  # All items



"""## Importing Libraries"""

import math

math.sqrt(16)

import math as mt
mt.sqrt(16)

from math import sqrt

sqrt(16)

from math import sqrt as st
st(16)



"""# Working With Basic Libraries


1.   Pandas
2.   Numpy
3.   Matplotlib

## Pandas
"""

#Import Python Libraries

import pandas as pd


#Read csv file
df = pd.read_csv("http://openedx.forsk.in/c4x/Forsk_Labs/ST101/asset/Salaries.csv")
#location: http://openedx.forsk.in/c4x/Forsk_Labs/ST101/asset/Salaries.csv

#List first 5 records
print df.head(2)

#Can you guess how to view the last few records;

print df.tail(1)

print df.mean()
print df.median()

df['phd']
df[['phd','rank']]

print df['rank'].value_counts()
print df['rank'].value_counts(normalize = True)

"""
Data Frames: method iloc

If we need to select a range of rows and/or columns, 
using their positions we can use method iloc
"""
print df.iloc[2:10,0:4]


print df.iloc[0] # First row of a data frame

print df.iloc[1:5, :-1] # Leave last columns

print df.iloc[:, 0] # First column

print df.iloc[:, -1] # Last column

print df.iloc[0:7] #First 7 rows

print df.iloc[:, 0:2] #First 2 columns

print df.iloc[1:3, 0:2] #Second through third rows and first 2 columns

print df.iloc[[0,5], [1,3]] #1stand 6throws and 2ndand 4thcolumns

# Read a dataset with missing values
import pandas as pd
df = pd.read_csv("http://openedx.forsk.in/c4x/Forsk_Labs/ST101/asset/Salaries.csv")
print df

#There are a number of methods to deal with missing values in the data frame:
new_df = df.dropna()

print new_df

#forward fill
new_df = df.fillna(method='ffill')

#backward fill

new_df = df.fillna(method='bfill')

#hard coded values
new_df = df.fillna(100)

# fill all the records with missing values, with mean of that column
df['phd'] = df['phd'].fillna(df['phd'].mean())

# All columns
df = df.fillna(df.mean())

"""## Numpy"""

#Example 1

# A 2-dimensional array of size 2 x 3
import numpy as np


x = np.array([[1, 2, 3], [4, 5, 6]])

print type(x)
print x.shape
print x.dtype

# Printing Arrays
import numpy as np 
a = np.arange(9) 
print a 

#reshaping it another shape
b = a.reshape(3,3) 
print b

"""## Matplotlib"""

import matplotlib.pyplot as plt


xs = [1,2,3,4,5]
ys = [1,2,3,4,5]

plt.plot(xs, ys)
plt.scatter(xs, ys)

ys = [1, 4, 9, 16, 25]

ys = [x**2 for x in xs]


plt.plot(xs, ys)
plt.scatter(xs, ys)

"""# Data Preprocessing & Machine Learning


1.   Define Machine Learning
2.   Types - Supervised and Unsupervised
3.   Supervised - Regression and Classification
4.   Unsupervised - Clustering and Association

## Simple Linear Regression
"""

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('http://openedx.forsk.in/c4x/Forsk_Labs/ST101/asset/Income_Data.csv')
#location: http://openedx.forsk.in/c4x/Forsk_Labs/ST101/asset/Income_Data.csv

features = dataset.iloc[:, :-1].values
labels = dataset.iloc[:, -1].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size = 0.2)


# Fitting Simple Linear Regression to the Training set
from sklearn.linear_model import LinearRegression

regressor = LinearRegression()
regressor.fit(features_train, labels_train)

regressor.predict(features_test)

# Visualising the Test set results
#plt.scatter(features_train, labels_train, color = 'green')
plt.scatter(features_test, labels_test, color = 'red')
plt.plot(features_train, regressor.predict(features_train), color = 'blue')
plt.title('Income vs ML-Experience (Test set)')
plt.xlabel('ML-Experience')
plt.ylabel('Income')
plt.show()

"""## Multiple Linear Regression With Data Preprocessing"""

# Multiple Linear Regression

# Importing the libraries
import numpy as np
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('http://openedx.forsk.in/c4x/Forsk_Labs/ST101/asset/Salary_Classification.csv')
#location: http://openedx.forsk.in/c4x/Forsk_Labs/ST101/asset/Salary_Classification.csv

#dataset = pd.get_dummies(dataset)
#temp = dataset.values
features = dataset.iloc[:, :-1].values
labels = dataset.iloc[:, -1].values



# Encoding categorical data
from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
features[:, 0] = labelencoder.fit_transform(features[:, 0])

from sklearn.preprocessing import OneHotEncoder
onehotencoder = OneHotEncoder(categorical_features = [0])
features = onehotencoder.fit_transform(features).toarray()

features

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size = 0.2, random_state = 0)


# Fitting Multiple Linear Regression to the Training set
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(features_train, labels_train)

# Predicting the Test set results
x = [1,0,0,3000,2,2]
x = np.array(x)
regressor.predict(x.reshape(1, -1))

"""## Classification"""

# K-Nearest Neighbors (K-NN)

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('http://openedx.forsk.in/c4x/Forsk_Labs/ST101/asset/Social_Network_Ads.csv')
#location: http://openedx.forsk.in/c4x/Forsk_Labs/ST101/asset/Social_Network_Ads.csv

dataset.head()

features = dataset.iloc[:, [2, 3]].values
labels = dataset.iloc[:, 4].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size = 0.25)

# Fitting K-NN to the Training set

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier() 
classifier.fit(features_train, labels_train)

# Predicting the Test set results
labels_pred = classifier.predict(features_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(labels_test, labels_pred)

print cm

x = [23, 25000]
x = np.array(x)
x = x.reshape(1,2)
print classifier.predict(x)

x = [53, 125000]
x = np.array(x)
x = x.reshape(1,2)
print classifier.predict(x)

# Plot the decision boundary. For that, we will assign a color to each
   

x_min, x_max = features_train[:, 0].min() - 1, features_train[:, 0].max() + 1
y_min, y_max = features_train[:, 1].min() - 1, features_train[:, 1].max() + 1

xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),
                     np.arange(y_min, y_max, 0.1))
# Obtain labels for each point in mesh using the model.
# ravel() is equivalent to flatten method.
# data dimension must match training data dimension, hence using ravel
Z = classifier.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)

# Plot the points
plt.plot(features_test[labels_test == 0, 0], features_test[labels_test == 0, 1], 'ro', label='Class 1')
plt.plot(features_test[labels_test == 1, 0], features_test[labels_test == 1, 1], 'bo', label='Class 2')
#plot the decision boundary
plt.contourf(xx, yy, Z, alpha=.5)

plt.show()
